{"version":3,"sources":["CustomCard.js","DynamicCardDeck.js","DynamicCardDeckManager.js","App.js","serviceWorker.js","index.js"],"names":["CustomCard","props","data","react_default","a","createElement","reactstrap_es","className","cardTitle","lib_default","src","imageSource","width","height","alt","imageAltText","cardText","DynamicCardDeck","src_CustomCard","cards","map","this","createCard","length","deckSize","blankCard","createBlankCard","push","createCards","React","Component","DynamicCardDeckManager","DynamicCardDeck_DynamicCardDeck","_this","chunkedCards","chunk","console","log","createDeck","createDecks","Boolean","window","location","hostname","match","ReactDOM","render","react_responsive_default","maxWidth","DynamicCardDeckManager_DynamicCardDeckManager","minWidth","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5844e94a.chunk.js","sourcesContent":["import React from 'react';\nimport {Card, CardBody, CardTitle, CardText} from 'reactstrap';\nimport Image from 'react-graceful-image';\n\nlet CustomCard = (props) => {\n  const data = props.data;\n  return (\n    <Card className=\"m-2\">\n      <CardBody>\n        <CardTitle>\n          {data.cardTitle}\n          <br />\n          <Image\n            src={data.imageSource}\n            width=\"64\"\n            height=\"64\"\n            alt={data.imageAltText}\n          />\n        </CardTitle>\n        <CardText>{data.cardText}</CardText>\n      </CardBody>\n    </Card>\n  );\n}\n\nexport default CustomCard;\n\n    // {/*getWrapDivs(props.position)*/}\n","// Makes a single deck given a variable set of cards\n\nimport React from 'react';\nimport { CardDeck } from 'reactstrap';\nimport CustomCard from './CustomCard';\n\nexport default class DynamicCardDeck extends React.Component {\n  createCard(data) {\n    return <CustomCard data={data} />;\n  }\n\n  createBlankCard() {\n    const blankCardData = {\n      imageSource: 'https://via.placeholder.com/318x270/FFFFFF/FFFFFF',\n      imageAltText: '',\n      cardTitle: '',\n      cardText: ''\n    };\n    return <CustomCard data={blankCardData} />;\n  }\n\n  createCards(cards) {\n    return cards.map(this.createCard);\n  }\n\n  render() {\n    let cards = this.props.cards;\n    while (cards.length < this.props.deckSize) {\n      let blankCard = this.createBlankCard();\n      cards.push(blankCard);\n    }\n    return (\n      <CardDeck className=\"my-2\">\n        {this.createCards(this.props.cards)}\n      </CardDeck>\n    );\n  }\n};\n","// Generate an appropriate number of decks for the current window size\n\nimport React from 'react';\nimport { chunk } from 'lodash';\nimport DynamicCardDeck from './DynamicCardDeck';\n\nexport default class DynamicCardDeckManager extends React.Component {\n  createDeck(cards, deckSize) {\n    return <DynamicCardDeck cards={cards} deckSize={deckSize} />;\n  }\n\n  createDecks(cards, deckSize) {\n    const chunkedCards = chunk(cards, deckSize);\n    console.log(chunkedCards)\n    return chunkedCards.map((chunk) => {return this.createDeck(chunk, deckSize)})\n  }\n\n  render() {\n    return (\n      <div>\n        {this.createDecks(this.props.cards, this.props.deckSize)}\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport {Jumbotron, Container} from 'reactstrap';\nimport MediaQuery from 'react-responsive';\nimport DynamicCardDeckManager from './DynamicCardDeckManager';\nimport './App.css';\n\nconst cards = [\n  {\n    imageSource: 'https://www.countryflags.io/ca/flat/64.png',\n    imageAltText: 'Card image cap',\n    cardTitle: '1 Card title',\n    cardText: 'This is a longer card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.'\n  },\n  {\n    imageSource: 'https://www.countryflags.io/aa/flat/64.png',\n    imageAltText: 'Card image cap',\n    cardTitle: '2 Card title',\n    cardText: 'This is a longer card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.'\n  },\n  {\n    imageSource: 'https://www.countryflags.io/ca/flat/64.png',\n    imageAltText: 'Flag: Canada',\n    cardTitle: '3 Card title',\n    cardText: 'This is a longer card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.'\n  },\n  {\n    imageSource: 'https://www.countryflags.io/ca/flat/64.png',\n    imageAltText: 'Flag: Canada',\n    cardTitle: '4 Card title',\n    cardText: 'This is a longer card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.'\n  },\n  {\n    imageSource: 'https://www.countryflags.io/ca/flat/64.png',\n    imageAltText: 'Flag: Canada',\n    cardTitle: '5 Card title',\n    cardText: 'This is a longer card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.'\n  },\n  {\n    imageSource: 'https://www.countryflags.io/ca/flat/64.png',\n    imageAltText: 'Flag: Canada',\n    cardTitle: '6 Card title',\n    cardText: 'This is a longer card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.'\n  },\n  {\n    imageSource: 'https://www.countryflags.io/ca/flat/64.png',\n    imageAltText: 'Flag: Canada',\n    cardTitle: '7 Card title',\n    cardText: 'This is a longer card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.'\n  },\n  {\n    imageSource: 'https://www.countryflags.io/ca/flat/64.png',\n    imageAltText: 'Flag: Canada',\n    cardTitle: '8 Card title',\n    cardText: 'This is a longer card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.'\n  },\n  {\n    imageSource: 'https://www.countryflags.io/ca/flat/64.png',\n    imageAltText: 'Flag: Canada',\n    cardTitle: '9 Card title',\n    cardText: 'This is a longer card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.'\n  },\n  {\n    imageSource: 'https://www.countryflags.io/ca/flat/64.png',\n    imageAltText: 'Flag: Canada',\n    cardTitle: '10 Card title',\n    cardText: 'This is a longer card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.'\n  },\n];\n\nexport default () => (\n  <div className=\"App\">\n    <Jumbotron className=\"text-center\">\n        <h1 className=\"display-3 text-justify\">Welcome To My Hello World!</h1>\n        <hr className=\"my-2\" />\n        <p className=\"lead\">My name is Ryan Oldford. Welcome, and hello!</p>\n    </Jumbotron>\n    <Container className=\"text-center\">\n      <MediaQuery maxWidth={767.98}>\n        <DynamicCardDeckManager cards={cards} deckSize={2} />\n      </MediaQuery>\n      <MediaQuery minWidth={768} maxWidth={991.98}>\n        <DynamicCardDeckManager cards={cards} deckSize={3} />\n      </MediaQuery>\n      <MediaQuery minWidth={992} maxWidth={1199.98}>\n        <DynamicCardDeckManager cards={cards} deckSize={4} />\n      </MediaQuery>\n      <MediaQuery minWidth={1200}>\n        <DynamicCardDeckManager cards={cards} deckSize={5} />\n      </MediaQuery>\n    </Container>\n  </div>\n);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}